<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqOptimizer.CSharp</name>
    </assembly>
    <members>
        <member name="T:Nessos.LinqOptimizer.CSharp.Extensions">
            <summary>
            Provides a set of static methods for querying objects that implement IQueryExpr.
            </summary>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.AsQueryExpr``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enables the optimization of a query.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An IEnumerable to convert to an IQueryExpr.</param>
            <returns>A query that returns the elements of the source sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``1(Nessos.LinqOptimizer.Base.IQueryExpr{``0})">
            <summary>
            Compiles a query to optimized code that can by invoked using a Func.
            </summary>
            <param name="query">The query to compile</param>
            <returns>A Func containing optimized code.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``1(Nessos.LinqOptimizer.Base.IQueryExpr{``0},System.Boolean)">
            <summary>
            Compiles a query to optimized code that can by invoked using a Func. <para/>
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <param name="query">The query to compile</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A Func containing optimized code.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile(Nessos.LinqOptimizer.Base.IQueryExpr)">
            <summary>
            Compiles a query to optimized code that can by invoked using a Func.
            </summary>
            <param name="query">The query to compile</param>
            <returns>A Func containing optimized code.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile(Nessos.LinqOptimizer.Base.IQueryExpr,System.Boolean)">
            <summary>
            Compiles a query to optimized code that can by invoked using a Func.<para/>
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <param name="query">The query to compile</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A Func containing optimized code.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Run``1(Nessos.LinqOptimizer.Base.IQueryExpr{``0})">
            <summary>
            Compiles a query to optimized code, runs the code and returns the result.
            </summary>
            <param name="query">The query to run.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Run``1(Nessos.LinqOptimizer.Base.IQueryExpr{``0},System.Boolean)">
            <summary>
            Compiles a query to optimized code, runs the code and returns the result. <para/>
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <param name="query">The query to run.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Run(Nessos.LinqOptimizer.Base.IQueryExpr)">
            <summary>
            Compiles a query to optimized code, runs the code and returns the result.
            </summary>
            <param name="query">The query to run.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Run(Nessos.LinqOptimizer.Base.IQueryExpr,System.Boolean)">
            <summary>
            Compiles a query to optimized code, runs the code and returns the result.<para/>
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <param name="query">The query to run.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,Nessos.LinqOptimizer.Base.IQueryExpr{``1}}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T">The type of the query parameter.</typeparam>
            <typeparam name="TResult">The type of the query.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,Nessos.LinqOptimizer.Base.IQueryExpr{``2}}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <typeparam name="TResult">The type of the query.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,Nessos.LinqOptimizer.Base.IQueryExpr{``3}}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <typeparam name="T3">The type of the third query parameter.</typeparam>
            <typeparam name="TResult">The type of the query.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,Nessos.LinqOptimizer.Base.IQueryExpr{``4}}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <typeparam name="T3">The type of the third query parameter.</typeparam>
            <typeparam name="T4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TResult">The type of the query.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,Nessos.LinqOptimizer.Base.IQueryExpr{``5}}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <typeparam name="T3">The type of the third query parameter.</typeparam>
            <typeparam name="T4">The type of the fourth query parameter.</typeparam>
            <typeparam name="T5">The type of the fifth query parameter.</typeparam>
            <typeparam name="TResult">The type of the query.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``1(System.Linq.Expressions.Expression{System.Func{``0,Nessos.LinqOptimizer.Base.IQueryExpr}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T">The type of the query parameter.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1,Nessos.LinqOptimizer.Base.IQueryExpr}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,Nessos.LinqOptimizer.Base.IQueryExpr}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <typeparam name="T3">The type of the third query parameter.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,Nessos.LinqOptimizer.Base.IQueryExpr}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <typeparam name="T3">The type of the third query parameter.</typeparam>
            <typeparam name="T4">The type of the fourth query parameter.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,Nessos.LinqOptimizer.Base.IQueryExpr}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <typeparam name="T3">The type of the third query parameter.</typeparam>
            <typeparam name="T4">The type of the fourth query parameter.</typeparam>
            <typeparam name="T5">The type of the fifth query parameter.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Select``2(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a new query that projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of the query.</typeparam>
            <typeparam name="TResult">The type of the value returned by selector.</typeparam>
            <param name="query">A query whose values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A query whose elements will be the result of invoking the transform function on each element of source.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Select``2(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
            <summary>
            Creates a new query that projects each element of a sequence into a new form by incorporating the element's index.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the value returned by selector.</typeparam>
            <param name="query">A query whose values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
            <returns>A query whose elements will be the result of invoking the transform function on each element of source.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Where``1(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a new query that filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">An query whose values to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A query that contains elements from the input query that satisfy the condition.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Where``1(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Creates a new query that filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.
            </summary>
            <typeparam name="TSource">The type of the elements of query.</typeparam>
            <param name="query">An query whose values to filter.</param>
            <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>A query that contains elements from the input query that satisfy the condition.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Aggregate``2(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
            <summary>
            Creates a new query that applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAcc">The type of the accumulator value.</typeparam>
            <param name="query">An query whose values are used to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <returns>A query that returns the final accumulator value.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Sum(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Creates a new query that computes the sum of a sequence of Double values.
            </summary>
            <param name="query">A query whose sequence of Double values to calculate the sum of.</param>
            <returns>A query that returns the sum of the values in the sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Sum(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Creates a new query that computes the sum of a sequence of int values.
            </summary>
            <param name="query">A query whose sequence of int values to calculate the sum of.</param>
            <returns>A query that returns the sum of the values in the sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Count``1(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Creates a new query that returns the number of elements in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">A query whose elements will be count.</param>
            <returns>A query that returns the number of elements in the input sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.SelectMany``2(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>
            Creates a new query that projects each element of a sequence to an IEnumerable and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
            <param name="query">A query whose values to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A query whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.SelectMany``3(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Creates a query that projects each element of a sequence to an IEnumerable, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TCol">The type of the intermediate elements collected by collectionSelector.</typeparam>
            <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
            <param name="query">A query whose values to project.</param>
            <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
            <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
            <returns>A query whose elements are the result of invoking the one-to-many transform function on each element of the input sequence and the result selector function on each element therein.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Take``1(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Int32)">
            <summary>
            Creates a query that returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">The query to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <returns>A query that returns a sequence containing the specified number of elements from the start of the input sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.TakeWhile``1(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a query that returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">The query to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A query that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.SkipWhile``1(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a query that bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">The query to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A query that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Skip``1(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Int32)">
            <summary>
            A query that bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">A query to return elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A query that returns a sequence containing the elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.ForEach``1(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            A query that performs the specified action on each element of the source query.
            </summary>
            <param name="query">An query to return elements from.</param>
            <param name="action">The Action delegate to perform on each element of the query.</param>
            <returns>A query that performs the action on each element.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.GroupBy``2(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            A query that groups the elements of a sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="query">A query whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>A query where each IGrouping element contains a sequence of objects and a key.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.OrderBy``2(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a query that sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="query">A query whose values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A query whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.OrderByDescending``2(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a query that sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="query">A query whose values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A query whose elements are sorted in descending according to a key.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.ToList``1(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            A query that returns a List from an sequence of values.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">The query to create a List from.</param>
            <returns>A query that contains elements from the input sequence in a List form.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.ToArray``1(Nessos.LinqOptimizer.Base.IQueryExpr{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            A query that returns an array from an sequence of values.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">The query to create an array from.</param>
            <returns>A query that contains elements from the input sequence in an array form.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.ThenBy``2(Nessos.LinqOptimizer.Base.IQueryExpr{System.Linq.IOrderedEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Performs a subsequent ordering of the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="query">A query whose values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A query whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.ThenByDescending``2(Nessos.LinqOptimizer.Base.IQueryExpr{System.Linq.IOrderedEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Performs a subsequent ordering of the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="query">A query whose values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A query whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.Extensions.Generate``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>        
            A query that generates a sequence by mimicking a for loop.
            </summary>        
            <typeparam name="TState">State type.</typeparam>        
            <typeparam name="TResult">Result sequence element type.</typeparam>        
            <param name="initialState">Initial state of the generator loop.</param>        
            <param name="condition">Loop condition.</param>        
            <param name="iterate">State update function to run after every iteration of the generator loop.</param>        
            <param name="resultSelector">Result selector to compute resulting sequence elements.</param>        
            <returns>A query whose elements are obtained by running the generator loop, yielding computed elements.</returns>
        </member>
        <member name="T:Nessos.LinqOptimizer.CSharp.ParallelExtensions">
            <summary>
            Provides a set of static methods for querying objects that implement IParallelQExpr.
            </summary>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.AsParallelQueryExpr``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enables the optimization of a query in a parallel fashion.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An IEnumerable to convert to an IQExpr.</param>
            <returns>A parallel query that returns the elements of the source sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Compile``1(Nessos.LinqOptimizer.Base.IParallelQueryExpr{``0})">
            <summary>
            Compiles a parallel query to optimized code that can by invoked using a Func.
            </summary>
            <param name="query">The query to compile</param>
            <returns>A Func containing optimized code.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Compile``1(Nessos.LinqOptimizer.Base.IParallelQueryExpr{``0},System.Boolean)">
            <summary>
            Compiles a parallel query to optimized code that can by invoked using a Func.<para/>
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <param name="query">The query to compile</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A Func containing optimized code.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Run``1(Nessos.LinqOptimizer.Base.IParallelQueryExpr{``0})">
            <summary>
            Compiles a parallel query to optimized code, runs the code and returns the result.
            </summary>
            <param name="query">The query to run.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Run``1(Nessos.LinqOptimizer.Base.IParallelQueryExpr{``0},System.Boolean)">
            <summary>
            Compiles a parallel query to optimized code, runs the code and returns the result.<para/>
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <param name="query">The query to run.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Select``2(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a new query that projects in parallel each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of the query.</typeparam>
            <typeparam name="TResult">The type of the value returned by selector.</typeparam>
            <param name="query">A query whose values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A query whose elements will be the result of invoking the transform function on each element of source, in parallel.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Where``1(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a new query that filters in parallel a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">An query whose values to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A parallel query that contains elements from the input query that satisfy the condition.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Sum(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Creates a new query that computes the sum of a sequence of Double values in parallel.
            </summary>
            <param name="query">A query whose sequence of Double values to calculate the sum of.</param>
            <returns>A parallel query that returns the sum of the values in the sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Sum(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Creates a new query that computes the sum of a sequence of int values in parallel.
            </summary>
            <param name="query">A query whose sequence of int values to calculate the sum of.</param>
            <returns>A parallel query that returns the sum of the values in the sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.SelectMany``2(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>
            Creates a new parallel query that projects each element of a sequence to an IEnumerable and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
            <param name="query">A query whose values to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A parallel query whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.SelectMany``3(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Creates a parallel query that projects each element of a sequence to an IEnumerable, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TCol">The type of the intermediate elements collected by collectionSelector.</typeparam>
            <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
            <param name="query">A query whose values to project.</param>
            <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
            <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
            <returns>A parallel query whose elements are the result of invoking the one-to-many transform function on each element of the input sequence and the result selector function on each element therein.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.GroupBy``2(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            A parallel query that groups the elements of a sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="query">A query whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>A parallel query where each IGrouping element contains a sequence of objects and a key.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.OrderBy``2(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a query that sorts in parallel the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="query">A query whose values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A parallel query whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.OrderByDescending``2(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a query that sorts in parallel the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="query">A query whose values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A parallel query whose elements are sorted in descending according to a key.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Count``1(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Creates a new parallel query that returns the number of elements in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">A query whose elements will be count.</param>
            <returns>A parallel query that returns the number of elements in the input sequence.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.ToList``1(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            A parallel query that returns a List from an sequence of values.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">The query to create a List from.</param>
            <returns>A parallel query that contains elements from the input sequence in a List form.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.ToArray``1(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            A parallel query that returns an array from an sequence of values.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="query">The query to create an array from.</param>
            <returns>A parallel query that contains elements from the input sequence in an array form.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.ThenBy``2(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Linq.IOrderedEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Performs a subsequent ordering of the elements of a sequence in parallel and in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="query">A query whose values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A parallel query whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.ThenByDescending``2(Nessos.LinqOptimizer.Base.IParallelQueryExpr{System.Linq.IOrderedEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Performs a subsequent ordering of the elements of a sequence in parallel and in descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="query">A query whose values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A parallel query whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,Nessos.LinqOptimizer.Base.IParallelQueryExpr{``1}}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized parallel code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T">The type of the query parameter.</typeparam>
            <typeparam name="TResult">The type of the query.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,Nessos.LinqOptimizer.Base.IParallelQueryExpr{``2}}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized parallel code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <typeparam name="TResult">The type of the query.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,Nessos.LinqOptimizer.Base.IParallelQueryExpr{``3}}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized parallel code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <typeparam name="T3">The type of the third query parameter.</typeparam>
            <typeparam name="TResult">The type of the query.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,Nessos.LinqOptimizer.Base.IParallelQueryExpr{``4}}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized parallel code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <typeparam name="T3">The type of the third query parameter.</typeparam>
            <typeparam name="T4">The type of the fourth query parameter.</typeparam>
            <typeparam name="TResult">The type of the query.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.ParallelExtensions.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,Nessos.LinqOptimizer.Base.IParallelQueryExpr{``5}}},System.Boolean)">
            <summary>
            Precompiles a parameterized query to optimized parallel code that can by invoked using a Func.
            <b>Warning</b> : Enabling non-public member access might lead to performance degradation.
            </summary>
            <typeparam name="T1">The type of the first query parameter.</typeparam>
            <typeparam name="T2">The type of the second query parameter.</typeparam>
            <typeparam name="T3">The type of the third query parameter.</typeparam>
            <typeparam name="T4">The type of the fourth query parameter.</typeparam>
            <typeparam name="T5">The type of the fifth query parameter.</typeparam>
            <typeparam name="TResult">The type of the query.</typeparam>
            <param name="template">The parameterized query.</param>
            <param name="enableNonPublicMemberAccess">Enable or not non public member access from the compiled code.</param>
            <returns>A delegate to the optimized query.</returns>
        </member>
        <member name="T:Nessos.LinqOptimizer.CSharp.QueryExpr">
            <summary>
            Provides a set of static methods for creating queries.
            </summary>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.QueryExpr.Range(System.Int32,System.Int32)">
            <summary>
            Creates a new query that generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="start">The value of the first integer in the sequence.</param>
            <param name="count">The number of sequential integers to generate.</param>
            <returns>A query that contains a range of sequential integral numbers.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.QueryExpr.Repeat``1(``0,System.Int32)">
            <summary>
            Creates a new query that generates a sequence that contains one repeated value.
            </summary>
            <param name="element">The value to be repeated.</param>
            <param name="count">The number of sequential integers to generate.</param>
            <returns>A query that contains a repeated value.</returns>
        </member>
        <member name="M:Nessos.LinqOptimizer.CSharp.QueryExpr.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Creates a query that applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.
            </summary>
            <param name="first">The first sequence to merge.</param>
            <param name="second">The first sequence to merge.</param>
            <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
            <returns>A query that contains merged elements of two input sequences.</returns>
        </member>
    </members>
</doc>
