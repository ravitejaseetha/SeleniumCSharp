// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UITestWpf.Window1Classes
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class Window1
    {
        
        /// <summary>
        /// CalculateNetherlands200 - Use 'CalculateNetherlands200Params' to pass parameters into this method.
        /// </summary>
        public void CalculateNetherlands200()
        {
            #region Variable Declarations
            WpfComboBox uICmbCountriesComboBox = this.UITipCalculatorWindow.UICmbCountriesComboBox;
            WpfEdit uITxtBillAmountEdit = this.UITipCalculatorWindow.UITxtBillAmountEdit;
            WpfRadioButton uIBadRadioButton = this.UITipCalculatorWindow.UIBadRadioButton;
            WpfButton uICalculateTipButton = this.UITipCalculatorWindow.UICalculateTipButton;
            #endregion

            // Select 'Netherlands' in 'cmbCountries' combo box
            uICmbCountriesComboBox.SelectedItem = this.CalculateNetherlands200Params.UICmbCountriesComboBoxSelectedItem;

            // Type '200' in 'txtBillAmount' text box
            uITxtBillAmountEdit.Text = this.CalculateNetherlands200Params.UITxtBillAmountEditText;

            // Select 'Bad' radio button
            uIBadRadioButton.Selected = this.CalculateNetherlands200Params.UIBadRadioButtonSelected;

            // Click 'Calculate Tip' button
            Mouse.Click(uICalculateTipButton, new Point(70, 20));
        }
        
        /// <summary>
        /// AssertNetherlands200BadService - Use 'AssertNetherlands200BadServiceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertNetherlands200BadService()
        {
            #region Variable Declarations
            WpfEdit uITxtTotalAmountEdit = this.UITipCalculatorWindow.UITxtTotalAmountEdit;
            #endregion

            // Verify that the 'Text' property of 'txtTotalAmount' text box equals '210.00'
            Assert.AreEqual(this.AssertNetherlands200BadServiceExpectedValues.UITxtTotalAmountEditText, uITxtTotalAmountEdit.Text);
        }
        
        #region Properties
        public virtual CalculateNetherlands200Params CalculateNetherlands200Params
        {
            get
            {
                if ((this.mCalculateNetherlands200Params == null))
                {
                    this.mCalculateNetherlands200Params = new CalculateNetherlands200Params();
                }
                return this.mCalculateNetherlands200Params;
            }
        }
        
        public virtual AssertNetherlands200BadServiceExpectedValues AssertNetherlands200BadServiceExpectedValues
        {
            get
            {
                if ((this.mAssertNetherlands200BadServiceExpectedValues == null))
                {
                    this.mAssertNetherlands200BadServiceExpectedValues = new AssertNetherlands200BadServiceExpectedValues();
                }
                return this.mAssertNetherlands200BadServiceExpectedValues;
            }
        }
        
        public UITipCalculatorWindow UITipCalculatorWindow
        {
            get
            {
                if ((this.mUITipCalculatorWindow == null))
                {
                    this.mUITipCalculatorWindow = new UITipCalculatorWindow();
                }
                return this.mUITipCalculatorWindow;
            }
        }
        #endregion
        
        #region Fields
        private CalculateNetherlands200Params mCalculateNetherlands200Params;
        
        private AssertNetherlands200BadServiceExpectedValues mAssertNetherlands200BadServiceExpectedValues;
        
        private UITipCalculatorWindow mUITipCalculatorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CalculateNetherlands200'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class CalculateNetherlands200Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Netherlands' in 'cmbCountries' combo box
        /// </summary>
        public string UICmbCountriesComboBoxSelectedItem = "Netherlands";
        
        /// <summary>
        /// Type '200' in 'txtBillAmount' text box
        /// </summary>
        public string UITxtBillAmountEditText = "200";
        
        /// <summary>
        /// Select 'Bad' radio button
        /// </summary>
        public bool UIBadRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertNetherlands200BadService'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertNetherlands200BadServiceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'txtTotalAmount' text box equals '210.00'
        /// </summary>
        public string UITxtTotalAmountEditText = "210.00";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITipCalculatorWindow : WpfWindow
    {
        
        public UITipCalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Tip Calculator";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Tip Calculator");
            #endregion
        }
        
        #region Properties
        public WpfComboBox UICmbCountriesComboBox
        {
            get
            {
                if ((this.mUICmbCountriesComboBox == null))
                {
                    this.mUICmbCountriesComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUICmbCountriesComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "cmbCountries";
                    this.mUICmbCountriesComboBox.WindowTitles.Add("Tip Calculator");
                    #endregion
                }
                return this.mUICmbCountriesComboBox;
            }
        }
        
        public WpfEdit UITxtBillAmountEdit
        {
            get
            {
                if ((this.mUITxtBillAmountEdit == null))
                {
                    this.mUITxtBillAmountEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtBillAmountEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtBillAmount";
                    this.mUITxtBillAmountEdit.WindowTitles.Add("Tip Calculator");
                    #endregion
                }
                return this.mUITxtBillAmountEdit;
            }
        }
        
        public WpfRadioButton UIBadRadioButton
        {
            get
            {
                if ((this.mUIBadRadioButton == null))
                {
                    this.mUIBadRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUIBadRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "rdbBad";
                    this.mUIBadRadioButton.WindowTitles.Add("Tip Calculator");
                    #endregion
                }
                return this.mUIBadRadioButton;
            }
        }
        
        public WpfButton UICalculateTipButton
        {
            get
            {
                if ((this.mUICalculateTipButton == null))
                {
                    this.mUICalculateTipButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICalculateTipButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnCalcTip";
                    this.mUICalculateTipButton.WindowTitles.Add("Tip Calculator");
                    #endregion
                }
                return this.mUICalculateTipButton;
            }
        }
        
        public WpfEdit UITxtTotalAmountEdit
        {
            get
            {
                if ((this.mUITxtTotalAmountEdit == null))
                {
                    this.mUITxtTotalAmountEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtTotalAmountEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtTotalAmount";
                    this.mUITxtTotalAmountEdit.WindowTitles.Add("Tip Calculator");
                    #endregion
                }
                return this.mUITxtTotalAmountEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mUICmbCountriesComboBox;
        
        private WpfEdit mUITxtBillAmountEdit;
        
        private WpfRadioButton mUIBadRadioButton;
        
        private WpfButton mUICalculateTipButton;
        
        private WpfEdit mUITxtTotalAmountEdit;
        #endregion
    }
}
