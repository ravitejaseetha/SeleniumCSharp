//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("TipCalculatorModel", "FK_Country_Currency", "Currency", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TipCalculatorDataAccessLayer.Model.Currency), "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TipCalculatorDataAccessLayer.Model.Country), true)]

#endregion

namespace TipCalculatorDataAccessLayer.Model
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class TipCalculatorEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new TipCalculatorEntities object using the connection string found in the 'TipCalculatorEntities' section of the application configuration file.
        /// </summary>
        public TipCalculatorEntities() : base("name=TipCalculatorEntities", "TipCalculatorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TipCalculatorEntities object.
        /// </summary>
        public TipCalculatorEntities(string connectionString) : base(connectionString, "TipCalculatorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TipCalculatorEntities object.
        /// </summary>
        public TipCalculatorEntities(EntityConnection connection) : base(connection, "TipCalculatorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Country> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Country>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Country> _Countries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Currency> Currencies
        {
            get
            {
                if ((_Currencies == null))
                {
                    _Currencies = base.CreateObjectSet<Currency>("Currencies");
                }
                return _Currencies;
            }
        }
        private ObjectSet<Currency> _Currencies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Setting> Settings
        {
            get
            {
                if ((_Settings == null))
                {
                    _Settings = base.CreateObjectSet<Setting>("Settings");
                }
                return _Settings;
            }
        }
        private ObjectSet<Setting> _Settings;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Countries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountries(Country country)
        {
            base.AddObject("Countries", country);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Currencies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCurrencies(Currency currency)
        {
            base.AddObject("Currencies", currency);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Settings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSettings(Setting setting)
        {
            base.AddObject("Settings", setting);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipCalculatorModel", Name="Country")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Country : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="currencyId">Initial value of the CurrencyId property.</param>
        /// <param name="tipPercentage">Initial value of the TipPercentage property.</param>
        public static Country CreateCountry(global::System.Guid id, global::System.String name, global::System.Guid currencyId, global::System.Decimal tipPercentage)
        {
            Country country = new Country();
            country.Id = id;
            country.Name = name;
            country.CurrencyId = currencyId;
            country.TipPercentage = tipPercentage;
            return country;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid CurrencyId
        {
            get
            {
                return _CurrencyId;
            }
            set
            {
                OnCurrencyIdChanging(value);
                ReportPropertyChanging("CurrencyId");
                _CurrencyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrencyId");
                OnCurrencyIdChanged();
            }
        }
        private global::System.Guid _CurrencyId;
        partial void OnCurrencyIdChanging(global::System.Guid value);
        partial void OnCurrencyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal TipPercentage
        {
            get
            {
                return _TipPercentage;
            }
            set
            {
                OnTipPercentageChanging(value);
                ReportPropertyChanging("TipPercentage");
                _TipPercentage = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TipPercentage");
                OnTipPercentageChanged();
            }
        }
        private global::System.Decimal _TipPercentage;
        partial void OnTipPercentageChanging(global::System.Decimal value);
        partial void OnTipPercentageChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipCalculatorModel", "FK_Country_Currency", "Currency")]
        public Currency Currency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("TipCalculatorModel.FK_Country_Currency", "Currency").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("TipCalculatorModel.FK_Country_Currency", "Currency").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Currency> CurrencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("TipCalculatorModel.FK_Country_Currency", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Currency>("TipCalculatorModel.FK_Country_Currency", "Currency", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipCalculatorModel", Name="Currency")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Currency : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Currency object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="exchangeRate">Initial value of the ExchangeRate property.</param>
        public static Currency CreateCurrency(global::System.Guid id, global::System.String name, global::System.Decimal exchangeRate)
        {
            Currency currency = new Currency();
            currency.Id = id;
            currency.Name = name;
            currency.ExchangeRate = exchangeRate;
            return currency;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal ExchangeRate
        {
            get
            {
                return _ExchangeRate;
            }
            set
            {
                OnExchangeRateChanging(value);
                ReportPropertyChanging("ExchangeRate");
                _ExchangeRate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExchangeRate");
                OnExchangeRateChanged();
            }
        }
        private global::System.Decimal _ExchangeRate;
        partial void OnExchangeRateChanging(global::System.Decimal value);
        partial void OnExchangeRateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Symbol
        {
            get
            {
                return _Symbol;
            }
            set
            {
                OnSymbolChanging(value);
                ReportPropertyChanging("Symbol");
                _Symbol = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Symbol");
                OnSymbolChanged();
            }
        }
        private global::System.String _Symbol;
        partial void OnSymbolChanging(global::System.String value);
        partial void OnSymbolChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TipCalculatorModel", "FK_Country_Currency", "Country")]
        public EntityCollection<Country> Countries
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Country>("TipCalculatorModel.FK_Country_Currency", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Country>("TipCalculatorModel.FK_Country_Currency", "Country", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TipCalculatorModel", Name="Setting")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Setting : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Setting object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        /// <param name="factor">Initial value of the Factor property.</param>
        public static Setting CreateSetting(global::System.Guid id, global::System.String name, global::System.String value, global::System.Decimal factor)
        {
            Setting setting = new Setting();
            setting.Id = id;
            setting.Name = name;
            setting.Value = value;
            setting.Factor = factor;
            return setting;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Factor
        {
            get
            {
                return _Factor;
            }
            set
            {
                OnFactorChanging(value);
                ReportPropertyChanging("Factor");
                _Factor = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Factor");
                OnFactorChanged();
            }
        }
        private global::System.Decimal _Factor;
        partial void OnFactorChanging(global::System.Decimal value);
        partial void OnFactorChanged();

        #endregion

    
    }

    #endregion

    
}
